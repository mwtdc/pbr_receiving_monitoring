#!/usr/bin/python3.9
#!/usr/bin/env python
# coding: utf-8

import datetime
import logging
import pathlib
import smtplib
import urllib
import urllib.parse
import warnings
from email.message import EmailMessage
from sys import platform

import numpy as np
import pandas as pd
import pyodbc
import requests
import yaml
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

start_time = datetime.datetime.now()
warnings.filterwarnings('ignore')

print('# –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–† #', datetime.datetime.now())
logging.info(f'–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–†.')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–≥–µ—Ä–∞
if platform == 'linux' or platform == 'linux2':
    logging.basicConfig(filename=('/var/log/log-execute/'
                                  'log_journal_pbr_rec_monitoring.log.txt'),
                        level=logging.INFO,
                        format=('%(asctime)s - %(levelname)s - '
                                '%(funcName)s: %(lineno)d - %(message)s'))
elif platform == 'win32':
    logging.basicConfig(filename=(f'{pathlib.Path(__file__).parent.absolute()}'
                                  f'/log_journal_pbr_rec_monitoring.log.txt'),
                        level=logging.INFO,
                        format=('%(asctime)s - %(levelname)s - '
                                '%(funcName)s: %(lineno)d - %(message)s'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º yaml —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with open(
    f'{pathlib.Path(__file__).parent.absolute()}/settings.yaml', 'r',
        encoding='utf-8') as yaml_file:
    settings = yaml.safe_load(yaml_file)
telegram_settings = pd.DataFrame(settings['telegram'])
pyodbc_settings = pd.DataFrame(settings['pyodbc_db'])
email_settings = pd.DataFrame(settings['email'])
logging.info(f'YAML —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç.')


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ excel —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º —á–µ—Ä–µ–∑ Email

def send_mail(sender, recipients, subject, text, file):
    host_email = str(email_settings.host[0])
    user_email = str(email_settings.user[0])
    port_email = int(email_settings.port[0])
    password_email = str(email_settings.password[0])
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = ', '.join(recipients)
    msg.set_content(text)

    with open(f'{pathlib.Path(__file__).parent.absolute()}/{file}', 'rb') as f:
        file_data = f.read()
    msg.add_attachment(file_data,
                       maintype='application',
                       subtype='xlsx',
                       filename=file,)

    with smtplib.SMTP_SSL(host_email, port_email) as s:
        s.login(user_email, password_email)
        s.send_message(msg)
        s.quit()


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ Email
def email_notification(message_to_receive):
    logging.info("–°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ Email")
    try:
        send_mail(str(email_settings.sender[0]),
                  email_settings.recipients[0],
                  f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–† '
                  f'{datetime.datetime.now()}',
                  message_to_receive,
                  None)
    except Exception as e:
        print(e)
        logging.error(f'pbr_receiving_monitoring: '
                      f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ—á—Ç–æ–π: {e}')
        telegram(1, f'pbr_receiving_monitoring: '
                 f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ—á—Ç–æ–π: {e}')
    logging.info("–§–∏–Ω–∏—à –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ Email")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ telegram –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
# (—É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ yaml —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)


def telegram(i, text):
    msg = urllib.parse.quote(str(text))
    bot_token = str(telegram_settings.bot_token[i])
    channel_id = str(telegram_settings.channel_id[i])

    retry_strategy = Retry(
        total=3,
        status_forcelist=[101, 429, 500, 502, 503, 504],
        method_whitelist=["GET", "POST"],
        backoff_factor=1
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    http = requests.Session()
    http.mount("https://", adapter)
    http.mount("http://", adapter)

    http.post(f'https://api.telegram.org/bot{bot_token}/'
              f'sendMessage?chat_id={channel_id}&text={msg}', timeout=10)

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ –±–∞–∑–µ Mysql
# (–¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –∑–∞–¥–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º !!! –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 !!!!!)


def connection(i):
    server = str(pyodbc_settings.host[i])
    database = str(pyodbc_settings.database[i])
    username = str(pyodbc_settings.user[i])
    password = str(pyodbc_settings.password[i])
    return pyodbc.connect(f'DRIVER={{SQL Server}};'
                          f'SERVER={server};'
                          f'DATABASE={database};'
                          f'UID={username};'
                          f'PWD={password}')


# dt = datetime.datetime.now().replace(microsecond=0, second=0, minute=0)
# datetime_header = f'{dt}\n'
text_nopbr = 'üì©üö´–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –ü–ë–† –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏:\n'
text_noconnect = 'üåêüö´–ù–µ—Ç —Å–≤—è–∑–∏ —Å:\n'
logging.info(f'–°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–†.')

for ses in range(len(pyodbc_settings.index)):
    last_pbr = datetime.datetime.now().hour + 1
    pbr_must_be = list(range(1, last_pbr))
    name_ses = pyodbc_settings.ses_name[ses]
    print(pbr_must_be)
    try:
        conn = connection(ses)
        cursor = conn.cursor()
        cursor.execute(f'SELECT*FROM m53500.dbo.PlanVersions WHERE '
                       f'day = DATEADD(HOUR, -3, DATEDIFF(d, 0, GETDATE())) '
                       f'AND dtWrite > '
                       f'DATEADD(HOUR, -4, DATEDIFF(d, 0, GETDATE()))')
        pbr_dataframe = pd.DataFrame(
            np.array(cursor.fetchall()),
            columns=['id', 'day', 'type', 'dtRecived', 'dtWrite'])
        conn.close()
        pbr_in_modes_db = list(pbr_dataframe['type'])
        print(pbr_in_modes_db)
        difference = list(set(pbr_must_be).difference(set(pbr_in_modes_db)))
        message = ', '.join(str(x) for x in difference)
        print(difference)
        if difference:
            text_nopbr += f'{pyodbc_settings.ses_name[ses]}: {message}\n'
    except Exception:
        logging.info(f'–ù–µ—Ç —Å–≤—è–∑–∏ —Å {pyodbc_settings.ses_name[ses]}')
        text_noconnect += f'{pyodbc_settings.ses_name[ses]}\n'
print(text_nopbr)
print(text_noconnect)
logging.info(f'–°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.')
# –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∏ –∏ –ü–ë–† –Ω–µ –ø–æ–ª—É—á–µ–Ω
if (text_noconnect != 'üåêüö´–ù–µ—Ç —Å–≤—è–∑–∏ —Å:\n' and
        text_nopbr != 'üì©üö´–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –ü–ë–† –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏:\n'):
    telegram(1, f'{text_nopbr}{text_noconnect}')
    email_notification(f'{text_nopbr}{text_noconnect}')
# –ï—Å–ª–∏ —Å–≤—è–∑—å –µ—Å—Ç—å –∏ –ü–ë–† –Ω–µ –ø–æ–ª—É—á–µ–Ω
elif (text_noconnect == 'üåêüö´–ù–µ—Ç —Å–≤—è–∑–∏ —Å:\n' and
        text_nopbr != 'üì©üö´–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –ü–ë–† –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏:\n'):
    telegram(1, f'‚úÖ–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω—Ü–∏—è–º –µ—Å—Ç—å.\n{text_nopbr}')
    email_notification(f'‚úÖ–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω—Ü–∏—è–º –µ—Å—Ç—å.\n{text_nopbr}')
# –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∏ –ø–æ –≤—Å–µ–º —Å—Ç–∞–Ω—Ü–∏—è–º
elif (text_noconnect != 'üåêüö´–ù–µ—Ç —Å–≤—è–∑–∏ —Å:\n' and
        text_nopbr == 'üì©üö´–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –ü–ë–† –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏:\n'):
    telegram(1, f'‚ùå–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Å—Ç–∞–Ω—Ü–∏—è–º.')
    email_notification(f'‚ùå–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Å—Ç–∞–Ω—Ü–∏—è–º.')
# –ï—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º
elif (text_noconnect == 'üåêüö´–ù–µ—Ç —Å–≤—è–∑–∏ —Å:\n' and
        text_nopbr == 'üì©üö´–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –ü–ë–† –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏:\n'):
    telegram(1, f'‚úÖ–ü–ë–†—ã –ø–æ –≤—Å–µ–º —Å—Ç–∞–Ω—Ü–∏—è–º –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–≤—è–∑—å –µ—Å—Ç—å.')
    email_notification(f'‚úÖ–ü–ë–†—ã –ø–æ –≤—Å–µ–º —Å—Ç–∞–Ω—Ü–∏—è–º –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–≤—è–∑—å –µ—Å—Ç—å.')
logging.info(f'–§–∏–Ω–∏—à –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.')

print('–§–∏–Ω–∏—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–† üèÅ')
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', datetime.datetime.now() - start_time)
logging.info('–§–∏–Ω–∏—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–† üèÅ')
telegram(1,
         f'–§–∏–Ω–∏—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ë–† üèÅ '
         f'(‚àÜ={datetime.datetime.now() - start_time})')
